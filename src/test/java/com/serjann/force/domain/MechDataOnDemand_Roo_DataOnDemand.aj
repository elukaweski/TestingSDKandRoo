// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.serjann.force.domain;

import com.serjann.force.domain.Mech;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect MechDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MechDataOnDemand: @Component;
    
    private Random MechDataOnDemand.rnd = new SecureRandom();
    
    private List<Mech> MechDataOnDemand.data;
    
    public Mech MechDataOnDemand.getNewTransientMech(int index) {
        Mech obj = new Mech();
        setDessc1(obj, index);
        setDessc2(obj, index);
        return obj;
    }
    
    public void MechDataOnDemand.setDessc1(Mech obj, int index) {
        String dessc1 = "dessc1_" + index;
        if (dessc1.length() > 50) {
            dessc1 = dessc1.substring(0, 50);
        }
        obj.setDessc1(dessc1);
    }
    
    public void MechDataOnDemand.setDessc2(Mech obj, int index) {
        String dessc2 = "dessc2_" + index;
        if (dessc2.length() > 50) {
            dessc2 = dessc2.substring(0, 50);
        }
        obj.setDessc2(dessc2);
    }
    
    public Mech MechDataOnDemand.getSpecificMech(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Mech obj = data.get(index);
        java.lang.String id = obj.getId();
        return Mech.findMech(id);
    }
    
    public Mech MechDataOnDemand.getRandomMech() {
        init();
        Mech obj = data.get(rnd.nextInt(data.size()));
        java.lang.String id = obj.getId();
        return Mech.findMech(id);
    }
    
    public boolean MechDataOnDemand.modifyMech(Mech obj) {
        return false;
    }
    
    public void MechDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Mech.findMechEntries(from, to);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Mech' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.serjann.force.domain.Mech>();
        for (int i = 0; i < 10; i++) {
            Mech obj = getNewTransientMech(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
