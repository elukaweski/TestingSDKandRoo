// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.serjann.force.domain;

import com.serjann.force.domain.Mech;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Mech_Roo_Entity {
    
    @PersistenceContext
    transient EntityManager Mech.entityManager;
    
    @Transactional
    public void Mech.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Mech.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Mech attached = Mech.findMech(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Mech.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Mech.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Mech Mech.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Mech merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Mech.entityManager() {
        EntityManager em = new Mech().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Mech.countMeches() {
        return ((Number) entityManager().createQuery("SELECT COUNT(o) FROM Mech o").getSingleResult()).longValue();
    }
    
    @SuppressWarnings("unchecked")
    public static List<Mech> Mech.findAllMeches() {
        return entityManager().createQuery("SELECT o FROM Mech o").getResultList();
    }
    
    public static Mech Mech.findMech(String id) {
        if (id == null || id.length() == 0) return null;
        try {
            return (Mech) entityManager().createQuery("SELECT o FROM Mech o WHERE o.id = :id").setParameter("id", id).getSingleResult();
        } catch (org.springframework.dao.EmptyResultDataAccessException e) {
            return null;
        } catch (javax.persistence.NoResultException e) {
            return null;
        }
    }
    
    @SuppressWarnings("unchecked")
    public static List<Mech> Mech.findMechEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Mech o").setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
